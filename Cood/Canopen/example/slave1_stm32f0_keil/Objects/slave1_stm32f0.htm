<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\slave1_stm32f0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\slave1_stm32f0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Apr 27 16:48:56 2017
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; coCommTask &rArr; serviceManagement &rArr; receiveMessageHandler &rArr; icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[90]">icoTransmitMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">coCommStateEvent</a><BR>
 <LI><a href="#[cf]">getNextTransBuf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">coCommStateEvent</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">CEC_CAN_IRQHandler</a> from cpu_stm32f0_keil.o(i.CEC_CAN_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[7]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cpu_stm32f0_keil.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">USART3_4_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[36]">canInd</a> from main.o(i.canInd) referenced from main.o(i.main)
 <LI><a href="#[37]">commInd</a> from main.o(i.commInd) referenced from main.o(i.main)
 <LI><a href="#[2a]">hbConsFailure</a> from co_errctrl.o(i.hbConsFailure) referenced from co_errctrl.o(i.icoNmtErrorCtrlHandler)
 <LI><a href="#[29]">hbProdSendMessage</a> from co_errctrl.o(i.hbProdSendMessage) referenced from co_errctrl.o(i.icoHbProdStart)
 <LI><a href="#[2e]">hbState</a> from main.o(i.hbState) referenced from main.o(i.main)
 <LI><a href="#[2c]">inhibitTimer</a> from co_queue.o(i.inhibitTimer) referenced from co_queue.o(i.icoQueueHandler)
 <LI><a href="#[34]">ledGreenInd</a> from main.o(i.ledGreenInd) referenced from main.o(i.main)
 <LI><a href="#[35]">ledRedInd</a> from main.o(i.ledRedInd) referenced from main.o(i.main)
 <LI><a href="#[39]">ledTimerInd</a> from co_led.o(i.ledTimerInd) referenced from co_led.o(i.startLedTimer)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2d]">nmtInd</a> from main.o(i.nmtInd) referenced from main.o(i.main)
 <LI><a href="#[38]">pdoEventTimer</a> from co_pdo.o(i.pdoEventTimer) referenced from co_pdo.o(i.setupTrPdoTimer)
 <LI><a href="#[32]">pdoInd</a> from main.o(i.pdoInd) referenced from main.o(i.main)
 <LI><a href="#[33]">pdoRecEvent</a> from main.o(i.pdoRecEvent) referenced from main.o(i.main)
 <LI><a href="#[2b]">pdoReceiveEventTimer</a> from co_pdo.o(i.pdoReceiveEventTimer) referenced from co_pdo.o(i.icoPdoReceiveHandler)
 <LI><a href="#[30]">sdoServerCheckWriteInd</a> from main.o(i.sdoServerCheckWriteInd) referenced from main.o(i.main)
 <LI><a href="#[2f]">sdoServerReadInd</a> from main.o(i.sdoServerReadInd) referenced from main.o(i.main)
 <LI><a href="#[31]">sdoServerWriteInd</a> from main.o(i.sdoServerWriteInd) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[130]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[131]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[132]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpy
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueGetReceiveMessage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteIndCont
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadSegment
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerVarInit
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.CEC_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CEC_CAN_IRQHandler &rArr; codrvCanReceiveInterrupt &rArr; coQueueReceiveBufferIsFilled &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareCanInit
</UL>

<P><STRONG><a name="[4c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[53]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[43]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
</UL>

<P><STRONG><a name="[44]"></a>HAL_InitTick</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[45]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[52]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnableInterrupt
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetTxInterrupt
</UL>

<P><STRONG><a name="[49]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[4b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[46]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[4e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1352 bytes, Stack size 16 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[50]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4f]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[51]"></a>NVIC_Configuration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; codrvTimerISR &rArr; coTimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SystemClock_Config</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, cpu_stm32f0_keil.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_commtask.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commInd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoGetObjectAddr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odCheckObjLimitsOther
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6e]"></a>coCanOpenStackInit</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gen_objdict.o(i.coCanOpenStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = coCanOpenStackInit &rArr; coNmtInit &rArr; nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyProducerInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSdoServerInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdInitOdPtr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>coCanOpenStackVarInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, co_stackinit.o(i.coCanOpenStackVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = coCanOpenStackVarInit &rArr; icoErrorCtrlVarInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtVarInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLedVarInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlVarInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyVarInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCommTaskVarInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobHandlerVarInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerVarInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueVarInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoVarInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdAccessVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[85]"></a>coCommStateEvent</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, co_commtask.o(i.coCommStateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueGetReceiveMessage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInformStack
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextTransBuf
</UL>

<P><STRONG><a name="[88]"></a>coCommTask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_commtask.o(i.coCommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = coCommTask &rArr; serviceManagement &rArr; receiveMessageHandler &rArr; icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDriverHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serviceManagement
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>coCommTaskSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, co_commtask.o(i.coCommTaskSet))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerTick
</UL>

<P><STRONG><a name="[76]"></a>coEmcyProducerInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, co_emcy.o(i.coEmcyProducerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coEmcyProducerInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[8d]"></a>coEmcyWriteReq</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, co_emcy.o(i.coEmcyWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = coEmcyWriteReq &rArr; coOdGetObjAddr &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyWriteReq
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>coErrorCtrlInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, co_errctrl.o(i.coErrorCtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = coErrorCtrlInit &rArr; coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[11c]"></a>coEventRegister_CAN_STATE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_commtask.o(i.coEventRegister_CAN_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>coEventRegister_COMM_EVENT</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_commtask.o(i.coEventRegister_COMM_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>coEventRegister_ERRCTRL</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_errctrl.o(i.coEventRegister_ERRCTRL))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>coEventRegister_LED_GREEN</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, co_led.o(i.coEventRegister_LED_GREEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coEventRegister_LED_GREEN &rArr; ledGreenInd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>coEventRegister_LED_RED</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, co_led.o(i.coEventRegister_LED_RED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coEventRegister_LED_RED &rArr; ledRedInd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>coEventRegister_NMT</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_nmt.o(i.coEventRegister_NMT))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>coEventRegister_PDO</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_pdo.o(i.coEventRegister_PDO))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>coEventRegister_PDO_REC_EVENT</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_pdo.o(i.coEventRegister_PDO_REC_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>coEventRegister_SDO_SERVER_CHECK_WRITE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_CHECK_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>coEventRegister_SDO_SERVER_READ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_READ))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>coEventRegister_SDO_SERVER_WRITE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>coLedInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_led.o(i.coLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = coLedInit &rArr; coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[96]"></a>coLedSetGreen</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, co_led.o(i.coLedSetGreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = coLedSetGreen &rArr; startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
</UL>

<P><STRONG><a name="[97]"></a>coLedSetRed</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, co_led.o(i.coLedSetRed))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
</UL>

<P><STRONG><a name="[87]"></a>coLedSetState</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, co_led.o(i.coLedSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = coLedSetState &rArr; coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbConsFailure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>

<P><STRONG><a name="[da]"></a>coNmtGetNodeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_nmt.o(i.coNmtGetNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerSetDefaultValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlCheckObjLimit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
</UL>

<P><STRONG><a name="[8f]"></a>coNmtGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_nmt.o(i.coNmtGetState))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoRtrHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[79]"></a>coNmtInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_nmt.o(i.coNmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = coNmtInit &rArr; nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[9c]"></a>coNumMemcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, co_odaccess.o(i.coNumMemcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coNumMemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
</UL>

<P><STRONG><a name="[9e]"></a>coNumMemcpyPack</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, co_odaccess.o(i.coNumMemcpyPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coNumMemcpyPack
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
</UL>

<P><STRONG><a name="[9f]"></a>coNumMemcpyUnpack</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, co_odaccess.o(i.coNumMemcpyUnpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coNumMemcpyUnpack
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerAbort
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadIndCont
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
</UL>

<P><STRONG><a name="[a0]"></a>coOdGetDefaultVal_u16</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, co_odaccess.o(i.coOdGetDefaultVal_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coOdGetDefaultVal_u16 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
</UL>

<P><STRONG><a name="[a2]"></a>coOdGetDefaultVal_u32</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, co_odaccess.o(i.coOdGetDefaultVal_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coOdGetDefaultVal_u32 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
</UL>

<P><STRONG><a name="[91]"></a>coOdGetDefaultVal_u8</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, co_odaccess.o(i.coOdGetDefaultVal_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
</UL>

<P><STRONG><a name="[8e]"></a>coOdGetObjAddr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, co_odaccess.o(i.coOdGetObjAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coOdGetObjAddr &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
</UL>

<P><STRONG><a name="[ef]"></a>coOdGetObjAttribute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_odaccess.o(i.coOdGetObjAttribute))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
</UL>

<P><STRONG><a name="[a1]"></a>coOdGetObjDescPtr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, co_odaccess.o(i.coOdGetObjDescPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjDescIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
</UL>

<P><STRONG><a name="[a5]"></a>coOdGetObjSize</STRONG> (Thumb, 588 bytes, Stack size 4 bytes, co_odaccess.o(i.coOdGetObjSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = coOdGetObjSize &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadIndCont
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
</UL>

<P><STRONG><a name="[71]"></a>coOdInitOdPtr</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, co_odaccess.o(i.coOdInitOdPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = coOdInitOdPtr &rArr; icoOdReset &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[78]"></a>coPdoReceiveInit</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, co_pdo.o(i.coPdoReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = coPdoReceiveInit &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[a9]"></a>coPdoReqNr</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, co_pdo.o(i.coPdoReqNr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoEventTimer
</UL>

<P><STRONG><a name="[77]"></a>coPdoTransmitInit</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, co_pdo.o(i.coPdoTransmitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = coPdoTransmitInit &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPdoTrMapTable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[c7]"></a>coQueueGetNextTransmitMessage</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, co_queue.o(i.coQueueGetNextTransmitMessage))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[be]"></a>coQueueGetReceiveBuffer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, co_queue.o(i.coQueueGetReceiveBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
</UL>

<P><STRONG><a name="[120]"></a>coQueueInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, co_queue.o(i.coQueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
</UL>

<P><STRONG><a name="[c6]"></a>coQueueMsgTransmitted</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, co_queue.o(i.coQueueMsgTransmitted))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[ae]"></a>coQueueReceiveBufferIsFilled</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, co_queue.o(i.coQueueReceiveBufferIsFilled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = coQueueReceiveBufferIsFilled &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
</UL>

<P><STRONG><a name="[74]"></a>coSdoServerInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, co_sdoserv.o(i.coSdoServerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coSdoServerInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[72]"></a>coTimerInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_timer.o(i.coTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[e7]"></a>coTimerIsActive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, co_timer.o(i.coTimerIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
</UL>

<P><STRONG><a name="[af]"></a>coTimerStart</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, co_timer.o(i.coTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[b0]"></a>coTimerStop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, co_timer.o(i.coTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTimerCheck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopRecPdoTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[b2]"></a>coTimerTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_timer.o(i.coTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coTimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerISR
</UL>

<P><STRONG><a name="[bf]"></a>codrvCanDisable</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, codrv_bxcan.o(i.codrvCanDisable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>

<P><STRONG><a name="[8b]"></a>codrvCanDriverHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, codrv_bxcan.o(i.codrvCanDriverHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = codrvCanDriverHandler &rArr; codrvCanErrorInformStack &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInformStack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTask
</UL>

<P><STRONG><a name="[b6]"></a>codrvCanEnable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, codrv_bxcan.o(i.codrvCanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = codrvCanEnable &rArr; codrvCanEnableInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>codrvCanEnableInterrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.codrvCanEnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codrvCanEnableInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnable
</UL>

<P><STRONG><a name="[b8]"></a>codrvCanErrorGetFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, codrv_error.o(i.codrvCanErrorGetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInformStack
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInterrupt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorHandler
</UL>

<P><STRONG><a name="[b5]"></a>codrvCanErrorInformStack</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, codrv_error.o(i.codrvCanErrorInformStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = codrvCanErrorInformStack &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDriverHandler
</UL>

<P><STRONG><a name="[ba]"></a>codrvCanErrorInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, codrv_error.o(i.codrvCanErrorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = codrvCanErrorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>

<P><STRONG><a name="[42]"></a>codrvCanErrorInterrupt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, codrv_bxcan.o(i.codrvCanErrorInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = codrvCanErrorInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>codrvCanInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, codrv_bxcan.o(i.codrvCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; codrvCanGetBtrSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>codrvCanReceiveInterrupt</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, codrv_bxcan.o(i.codrvCanReceiveInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = codrvCanReceiveInterrupt &rArr; coQueueReceiveBufferIsFilled &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTaskSet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueGetReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>codrvCanSetBitRate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, codrv_bxcan.o(i.codrvCanSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = codrvCanSetBitRate &rArr; codrvCanGetBtrSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDisable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanGetBtrSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>

<P><STRONG><a name="[c1]"></a>codrvCanSetFilter</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, codrv_bxcan.o(i.codrvCanSetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetIdFilter
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanGetChan
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobFilterSet
</UL>

<P><STRONG><a name="[c4]"></a>codrvCanSetTxInterrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.codrvCanSetTxInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
</UL>

<P><STRONG><a name="[b9]"></a>codrvCanStartTransmission</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, codrv_bxcan.o(i.codrvCanStartTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetTxInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>

<P><STRONG><a name="[41]"></a>codrvCanTransmitInterrupt</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, codrv_bxcan.o(i.codrvCanTransmitInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = codrvCanTransmitInterrupt &rArr; codrvCanTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueMsgTransmitted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueGetNextTransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>codrvHardwareCanInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cpu_stm32f0_keil.o(i.codrvHardwareCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = codrvHardwareCanInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
</UL>

<P><STRONG><a name="[cb]"></a>codrvHardwareInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.codrvHardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = codrvHardwareInit &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareCanInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>codrvTimerISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.codrvTimerISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = codrvTimerISR &rArr; coTimerTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cc]"></a>codrvTimerSetup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cpu_stm32f0_keil.o(i.codrvTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = codrvTimerSetup &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>icoCheckRestrictedCobs</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, co_cobhandler.o(i.icoCheckRestrictedCobs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoCheckRestrictedCobs
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyCheckObjLimitCobid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimitCobid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckObjLimitCobId
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimitCobid
</UL>

<P><STRONG><a name="[fb]"></a>icoCobCheck</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, co_cobhandler.o(i.icoCobCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoCobCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueGetReceiveMessage
</UL>

<P><STRONG><a name="[8c]"></a>icoCobCreate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyProducerInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSdoServerInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
</UL>

<P><STRONG><a name="[d2]"></a>icoCobDisable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = icoCobDisable &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobFilterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisableAll
</UL>

<P><STRONG><a name="[d4]"></a>icoCobDisableAll</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, co_cobhandler.o(i.icoCobDisableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = icoCobDisableAll &rArr; icoCobDisable &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[f8]"></a>icoCobGetPointer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_cobhandler.o(i.icoCobGetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>

<P><STRONG><a name="[7a]"></a>icoCobHandlerVarInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_cobhandler.o(i.icoCobHandlerVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[d5]"></a>icoCobSet</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, co_cobhandler.o(i.icoCobSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobFilterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyReset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
</UL>

<P><STRONG><a name="[ad]"></a>icoCobSetInhibit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobSetInhibit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icoCobSetInhibit &rArr; icoQueueDeleteInhibit &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
</UL>

<P><STRONG><a name="[7b]"></a>icoCommTaskVarInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, co_commtask.o(i.icoCommTaskVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[61]"></a>icoEmcyCheckObjLimitCobid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, co_emcy.o(i.icoEmcyCheckObjLimitCobid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icoEmcyCheckObjLimitCobid &rArr; icoCheckRestrictedCobs
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCheckRestrictedCobs
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[68]"></a>icoEmcyCheckObjLimitHist</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_emcy.o(i.icoEmcyCheckObjLimitHist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoEmcyCheckObjLimitHist
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[123]"></a>icoEmcyGetObjectAddr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, co_emcy.o(i.icoEmcyGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoEmcyGetObjectAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[d8]"></a>icoEmcyObjChanged</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, co_emcy.o(i.icoEmcyObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = icoEmcyObjChanged &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[d9]"></a>icoEmcyProducerSetDefaultValue</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, co_emcy.o(i.icoEmcyProducerSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoEmcyProducerSetDefaultValue &rArr; coOdGetDefaultVal_u32 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[db]"></a>icoEmcyReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_emcy.o(i.icoEmcyReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = icoEmcyReset &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[7c]"></a>icoEmcyVarInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, co_emcy.o(i.icoEmcyVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[d1]"></a>icoEmcyWriteReq</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, co_emcy.o(i.icoEmcyWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = icoEmcyWriteReq &rArr; coEmcyWriteReq &rArr; coOdGetObjAddr &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbConsFailure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
</UL>

<P><STRONG><a name="[60]"></a>icoErrCtrlCheckObjLimit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, co_errctrl.o(i.icoErrCtrlCheckObjLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoErrCtrlCheckObjLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[122]"></a>icoErrCtrlGetObjectAddr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, co_errctrl.o(i.icoErrCtrlGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoErrCtrlGetObjectAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[d0]"></a>icoErrCtrlInd</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, co_errctrl.o(i.icoErrCtrlInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoErrCtrlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbConsFailure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
</UL>

<P><STRONG><a name="[dc]"></a>icoErrCtrlObjChanged</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, co_errctrl.o(i.icoErrCtrlObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = icoErrCtrlObjChanged &rArr; setupHbConsumer &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[86]"></a>icoErrorBehavior</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, co_errctrl.o(i.icoErrorBehavior))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbConsFailure
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>

<P><STRONG><a name="[e0]"></a>icoErrorCtrlReset</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, co_errctrl.o(i.icoErrorCtrlReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = icoErrorCtrlReset &rArr; setupHbConsumer &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlInd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[e1]"></a>icoErrorCtrlSetDefaultValue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, co_errctrl.o(i.icoErrorCtrlSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = icoErrorCtrlSetDefaultValue &rArr; coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[7d]"></a>icoErrorCtrlVarInit</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, co_errctrl.o(i.icoErrorCtrlVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoErrorCtrlVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[12c]"></a>icoEventCheck</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_event.o(i.icoEventCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoEventCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serviceManagement
</UL>

<P><STRONG><a name="[7e]"></a>icoEventInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_event.o(i.icoEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[e2]"></a>icoEventObjectChanged</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, co_odaccess.o(i.icoEventObjectChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = icoEventObjectChanged &rArr; icoRecPdoObjChanged &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteIndCont
</UL>

<P><STRONG><a name="[de]"></a>icoHbProdStart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, co_errctrl.o(i.icoHbProdStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
</UL>

<P><STRONG><a name="[7f]"></a>icoLedVarInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, co_led.o(i.icoLedVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[e6]"></a>icoNmtErrorCtrlHandler</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, co_errctrl.o(i.icoNmtErrorCtrlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = icoNmtErrorCtrlHandler &rArr; coLedSetState &rArr; coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerIsActive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlInd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtMsgHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[e8]"></a>icoNmtMsgHandler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, co_nmt.o(i.icoNmtMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icoNmtMsgHandler &rArr; nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[121]"></a>icoNmtPersistantNodeIdGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_nmt.o(i.icoNmtPersistantNodeIdGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoNmtPersistantNodeIdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[df]"></a>icoNmtStateChange</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, co_nmt.o(i.icoNmtStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoPreOperational
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtMsgHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
</UL>

<P><STRONG><a name="[80]"></a>icoNmtVarInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_nmt.o(i.icoNmtVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[81]"></a>icoOdAccessVarInit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, co_odaccess.o(i.icoOdAccessVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[eb]"></a>icoOdCheckObjLimits</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, co_odaccess.o(i.icoOdCheckObjLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odCheckObjLimitsOther
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
</UL>

<P><STRONG><a name="[6a]"></a>icoOdGetNumberOfSubs</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, co_odaccess.o(i.icoOdGetNumberOfSubs))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>

<P><STRONG><a name="[ed]"></a>icoOdGetObj</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, co_odaccess.o(i.icoOdGetObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = icoOdGetObj &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadSegment
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadIndCont
</UL>

<P><STRONG><a name="[6b]"></a>icoOdGetObjRecMapData</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, co_odaccess.o(i.icoOdGetObjRecMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAttribute
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapTable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapEntry
</UL>

<P><STRONG><a name="[6d]"></a>icoOdGetObjTrMapData</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, co_odaccess.o(i.icoOdGetObjTrMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAttribute
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapEntry
</UL>

<P><STRONG><a name="[f0]"></a>icoOdPutObj</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, co_odaccess.o(i.icoOdPutObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = icoOdPutObj &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
</UL>

<P><STRONG><a name="[a7]"></a>icoOdReset</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, co_odaccess.o(i.icoOdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icoOdReset &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdInitOdPtr
</UL>

<P><STRONG><a name="[e9]"></a>icoPdoOperational</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
</UL>

<P><STRONG><a name="[ea]"></a>icoPdoPreOperational</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoPreOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = icoPdoPreOperational &rArr; setupTrPdoTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
</UL>

<P><STRONG><a name="[f2]"></a>icoPdoReceiveHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, co_pdo.o(i.icoPdoReceiveHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = icoPdoReceiveHandler &rArr; icoEmcyWriteReq &rArr; coEmcyWriteReq &rArr; coOdGetObjAddr &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyWriteReq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[f4]"></a>icoPdoReset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, co_pdo.o(i.icoPdoReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopRecPdoTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[f6]"></a>icoPdoRtrHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoRtrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icoPdoRtrHandler &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[aa]"></a>icoPdoSearchTrPdoIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_pdo.o(i.icoPdoSearchTrPdoIndex))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoGetObjectAddr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimit_u8
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimit_u16
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimitCobid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr_R
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapTable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapEntry
</UL>

<P><STRONG><a name="[f7]"></a>icoPdoSetDefaultValue</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, co_pdo.o(i.icoPdoSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icoPdoSetDefaultValue &rArr; setupPdoTrMapTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[82]"></a>icoPdoVarInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_pdo.o(i.icoPdoVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[d6]"></a>icoQueueDeleteInhibit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, co_queue.o(i.icoQueueDeleteInhibit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icoQueueDeleteInhibit &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
</UL>

<P><STRONG><a name="[fa]"></a>icoQueueGetReceiveMessage</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, co_queue.o(i.icoQueueGetReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = icoQueueGetReceiveMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCheck
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[8a]"></a>icoQueueHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, co_queue.o(i.icoQueueHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icoQueueHandler &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTask
</UL>

<P><STRONG><a name="[83]"></a>icoQueueVarInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, co_queue.o(i.icoQueueVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[5f]"></a>icoRecMapCheckObjLimitMapEntry</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, co_pdo.o(i.icoRecMapCheckObjLimitMapEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icoRecMapCheckObjLimitMapEntry &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[67]"></a>icoRecMapCheckObjLimitMapTable</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, co_pdo.o(i.icoRecMapCheckObjLimitMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[fd]"></a>icoRecMapGetObjectAddr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecMapGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecMapGetObjectAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[fe]"></a>icoRecMapGetObjectAddr_R</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecMapGetObjectAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecMapGetObjectAddr_R
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>

<P><STRONG><a name="[5e]"></a>icoRecPdoCheckObjLimitCobid</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecPdoCheckObjLimitCobid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icoRecPdoCheckObjLimitCobid &rArr; icoCheckRestrictedCobs
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCheckRestrictedCobs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[59]"></a>icoRecPdoCheckObjLimit_u16</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecPdoCheckObjLimit_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecPdoCheckObjLimit_u16
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u16
</UL>

<P><STRONG><a name="[66]"></a>icoRecPdoCheckObjLimit_u8</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecPdoCheckObjLimit_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecPdoCheckObjLimit_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[ff]"></a>icoRecPdoGetObjectAddr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecPdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecPdoGetObjectAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[e5]"></a>icoRecPdoObjChanged</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, co_pdo.o(i.icoRecPdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icoRecPdoObjChanged &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopRecPdoTimer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[5b]"></a>icoSdoCheckObjLimitCobId</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, co_sdoserv.o(i.icoSdoCheckObjLimitCobId))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icoSdoCheckObjLimitCobId &rArr; icoCheckRestrictedCobs
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCheckRestrictedCobs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSdoServerIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[63]"></a>icoSdoCheckObjLimitNode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoCheckObjLimitNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoSdoCheckObjLimitNode
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSdoServerIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[12a]"></a>icoSdoCheckUserCheckWriteInd</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, co_sdoserv.o(i.icoSdoCheckUserCheckWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icoSdoCheckUserCheckWriteInd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
</UL>

<P><STRONG><a name="[128]"></a>icoSdoCheckUserReadInd</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, co_sdoserv.o(i.icoSdoCheckUserReadInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icoSdoCheckUserReadInd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
</UL>

<P><STRONG><a name="[12b]"></a>icoSdoCheckUserWriteInd</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, co_sdoserv.o(i.icoSdoCheckUserWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoSdoCheckUserWriteInd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
</UL>

<P><STRONG><a name="[109]"></a>icoSdoDeCodeMultiplexer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_sdoserv.o(i.icoSdoDeCodeMultiplexer))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
</UL>

<P><STRONG><a name="[101]"></a>icoSdoGetObjectAddr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, co_sdoserv.o(i.icoSdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoSdoGetObjectAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSdoServerIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[e3]"></a>icoSdoObjChanged</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, co_sdoserv.o(i.icoSdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = icoSdoObjChanged &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSdoServerIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[102]"></a>icoSdoServerAbort</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, co_sdoserv.o(i.icoSdoServerAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoSdoServerAbort &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoCodeMultiplexer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
</UL>

<P><STRONG><a name="[104]"></a>icoSdoServerHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, co_sdoserv.o(i.icoSdoServerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerAbort
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoDeCodeMultiplexer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadSegment
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>

<P><STRONG><a name="[10a]"></a>icoSdoServerReset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = icoSdoServerReset &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[10b]"></a>icoSdoServerSetDefaultValue</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoSdoServerSetDefaultValue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[84]"></a>icoSdoServerVarInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, co_sdoserv.o(i.icoSdoServerVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoSdoServerVarInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[11f]"></a>icoStoreLoadReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_store.o(i.icoStoreLoadReq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
</UL>

<P><STRONG><a name="[10d]"></a>icoTimerCheck</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, co_timer.o(i.icoTimerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoTimerCheck &rArr; coTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serviceManagement
</UL>

<P><STRONG><a name="[5d]"></a>icoTrMapCheckObjLimitMapEntry</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, co_pdo.o(i.icoTrMapCheckObjLimitMapEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icoTrMapCheckObjLimitMapEntry &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[65]"></a>icoTrMapCheckObjLimitMapTable</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, co_pdo.o(i.icoTrMapCheckObjLimitMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icoTrMapCheckObjLimitMapTable &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[10e]"></a>icoTrMapGetObjectAddr</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, co_pdo.o(i.icoTrMapGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icoTrMapGetObjectAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[10f]"></a>icoTrMapGetObjectAddr_R</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, co_pdo.o(i.icoTrMapGetObjectAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icoTrMapGetObjectAddr_R
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>

<P><STRONG><a name="[5c]"></a>icoTrPdoCheckObjLimitCobid</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, co_pdo.o(i.icoTrPdoCheckObjLimitCobid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icoTrPdoCheckObjLimitCobid &rArr; icoCheckRestrictedCobs
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCheckRestrictedCobs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u32
</UL>

<P><STRONG><a name="[57]"></a>icoTrPdoCheckObjLimit_u16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, co_pdo.o(i.icoTrPdoCheckObjLimit_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icoTrPdoCheckObjLimit_u16
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u16
</UL>

<P><STRONG><a name="[64]"></a>icoTrPdoCheckObjLimit_u8</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, co_pdo.o(i.icoTrPdoCheckObjLimit_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoTrPdoCheckObjLimit_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u8
</UL>

<P><STRONG><a name="[110]"></a>icoTrPdoGetObjectAddr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, co_pdo.o(i.icoTrPdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[e4]"></a>icoTrPdoObjChanged</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, co_pdo.o(i.icoTrPdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTrPdoIndex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[90]"></a>icoTransmitMessage</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, co_queue.o(i.icoTransmitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerIsActive
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLastMessage
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextTransBuf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToTransmitList
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToInhibitList
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerAbort
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteIndCont
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadSegment
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadIndCont
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = main &rArr; coCommTask &rArr; serviceManagement &rArr; receiveMessageHandler &rArr; icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_NMT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_RED
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_GREEN
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_ERRCTRL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_COMM_EVENT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_CAN_STATE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_WRITE
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_READ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_CHECK_WRITE
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_PDO_REC_EVENT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_PDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d3]"></a>icoCobFilterSet</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobFilterSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
</UL>

<P><STRONG><a name="[126]"></a>receiveMessageHandler</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, co_commtask.o(i.receiveMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = receiveMessageHandler &rArr; icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueGetReceiveMessage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoRtrHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtMsgHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serviceManagement
</UL>

<P><STRONG><a name="[89]"></a>serviceManagement</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, co_commtask.o(i.serviceManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = serviceManagement &rArr; receiveMessageHandler &rArr; icoSdoServerHandler &rArr; sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTimerCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventCheck
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveMessageHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTask
</UL>

<P><STRONG><a name="[2a]"></a>hbConsFailure</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, co_errctrl.o(i.hbConsFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hbConsFailure &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlInd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyWriteReq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_errctrl.o(i.icoNmtErrorCtrlHandler)
</UL>
<P><STRONG><a name="[29]"></a>hbProdSendMessage</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, co_errctrl.o(i.hbProdSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hbProdSendMessage &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtErrorCtrlHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_errctrl.o(i.icoHbProdStart)
</UL>
<P><STRONG><a name="[dd]"></a>setupHbConsumer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, co_errctrl.o(i.setupHbConsumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setupHbConsumer &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
</UL>

<P><STRONG><a name="[93]"></a>ledGreenInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_led.o(i.ledGreenInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_GREEN
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTimerInd
</UL>

<P><STRONG><a name="[95]"></a>ledRedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_led.o(i.ledRedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_RED
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTimerInd
</UL>

<P><STRONG><a name="[39]"></a>ledTimerInd</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, co_led.o(i.ledTimerInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ledTimerInd &rArr; ledRedInd
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_led.o(i.startLedTimer)
</UL>
<P><STRONG><a name="[99]"></a>startLedTimer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, co_led.o(i.startLedTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = startLedTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>

<P><STRONG><a name="[98]"></a>stopLedTimer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_led.o(i.stopLedTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stopLedTimer &rArr; coTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>

<P><STRONG><a name="[11e]"></a>nmtReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_nmt.o(i.nmtReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = nmtReset &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[9a]"></a>nmtResetAppl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_nmt.o(i.nmtResetAppl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nmtResetAppl &rArr; icoOdReset &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoStoreLoadReq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtMsgHandler
</UL>

<P><STRONG><a name="[9b]"></a>nmtResetComm</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, co_nmt.o(i.nmtResetComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoStoreLoadReq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerSetDefaultValue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerReset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtPersistantNodeIdGet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtReset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyReset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisableAll
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtMsgHandler
</UL>

<P><STRONG><a name="[58]"></a>checkObjLimits_u16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_odaccess.o(i.checkObjLimits_u16))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjValue_u16
</UL>

<P><STRONG><a name="[56]"></a>checkObjValue_u16</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, co_odaccess.o(i.checkObjValue_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = checkObjValue_u16 &rArr; icoRecPdoCheckObjLimit_u16
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimit_u16
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimit_u16
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjLimits_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
</UL>

<P><STRONG><a name="[5a]"></a>checkObjValue_u32</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, co_odaccess.o(i.checkObjValue_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = checkObjValue_u32 &rArr; icoRecMapCheckObjLimitMapEntry &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlCheckObjLimit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyCheckObjLimitCobid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimitCobid
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapEntry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckObjLimitCobId
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimitCobid
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
</UL>

<P><STRONG><a name="[62]"></a>checkObjValue_u8</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, co_odaccess.o(i.checkObjValue_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyCheckObjLimitHist
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoCheckObjLimit_u8
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapTable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckObjLimitNode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimit_u8
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapTable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
</UL>

<P><STRONG><a name="[ec]"></a>odCheckObjLimitsOther</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, co_odaccess.o(i.odCheckObjLimitsOther))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = odCheckObjLimitsOther &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
</UL>

<P><STRONG><a name="[a3]"></a>odGetObjAddr</STRONG> (Thumb, 692 bytes, Stack size 16 bytes, co_odaccess.o(i.odGetObjAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlGetObjectAddr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyGetObjectAddr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoGetObjectAddr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoGetObjectAddr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoGetObjectAddr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>

<P><STRONG><a name="[ee]"></a>odGetObjAddr_R</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, co_odaccess.o(i.odGetObjAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr_R
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr_R
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
</UL>

<P><STRONG><a name="[a4]"></a>odGetObjDescIdx</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, co_odaccess.o(i.odGetObjDescIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = odGetObjDescIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>

<P><STRONG><a name="[69]"></a>checkRecPdoMappingTable</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, co_pdo.o(i.checkRecPdoMappingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapTable
</UL>

<P><STRONG><a name="[6c]"></a>checkTrPdoMappingTable</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, co_pdo.o(i.checkTrPdoMappingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapCheckObjLimitMapTable
</UL>

<P><STRONG><a name="[ac]"></a>createPdoTrMapTable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, co_pdo.o(i.createPdoTrMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = createPdoTrMapTable &rArr; setupPdoTrMapTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
</UL>

<P><STRONG><a name="[38]"></a>pdoEventTimer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, co_pdo.o(i.pdoEventTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pdoEventTimer &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.setupTrPdoTimer)
</UL>
<P><STRONG><a name="[124]"></a>pdoInd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, co_pdo.o(i.pdoInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdoInd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
</UL>

<P><STRONG><a name="[125]"></a>pdoRecEventInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_pdo.o(i.pdoRecEventInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdoRecEventInd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveEventTimer
</UL>

<P><STRONG><a name="[f3]"></a>pdoReceiveData</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, co_pdo.o(i.pdoReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdoReceiveData &rArr; coNumMemcpyPack
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoInd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReceiveHandler
</UL>

<P><STRONG><a name="[2b]"></a>pdoReceiveEventTimer</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, co_pdo.o(i.pdoReceiveEventTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pdoReceiveEventTimer &rArr; pdoRecEventInd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoRecEventInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.icoPdoReceiveHandler)
</UL>
<P><STRONG><a name="[ab]"></a>pdoTransmitData</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, co_pdo.o(i.pdoTransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pdoTransmitData &rArr; icoTransmitMessage &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoRtrHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>

<P><STRONG><a name="[fc]"></a>searchRecPdo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_pdo.o(i.searchRecPdo))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoGetObjectAddr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimit_u8
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimit_u16
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoCheckObjLimitCobid
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr_R
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapTable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapCheckObjLimitMapEntry
</UL>

<P><STRONG><a name="[a8]"></a>setPdoCob</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, co_pdo.o(i.setPdoCob))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = setPdoCob &rArr; icoCobSet &rArr; icoCobFilterSet &rArr; codrvCanSetFilter &rArr; codrvCanSetIdFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
</UL>

<P><STRONG><a name="[ce]"></a>setupPdoTrMapTable</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, co_pdo.o(i.setupPdoTrMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setupPdoTrMapTable &rArr; icoOdGetObjTrMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPdoTrMapTable
</UL>

<P><STRONG><a name="[f1]"></a>setupTrPdoTimer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, co_pdo.o(i.setupTrPdoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setupTrPdoTimer &rArr; coTimerStart &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoPreOperational
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
</UL>

<P><STRONG><a name="[f5]"></a>stopRecPdoTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, co_pdo.o(i.stopRecPdoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stopRecPdoTimer &rArr; coTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
</UL>

<P><STRONG><a name="[112]"></a>addToInhibitList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_queue.o(i.addToInhibitList))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>

<P><STRONG><a name="[113]"></a>addToTransmitList</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, co_queue.o(i.addToTransmitList))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>

<P><STRONG><a name="[cf]"></a>getNextTransBuf</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, co_queue.o(i.getNextTransBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = getNextTransBuf &rArr;  coCommStateEvent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>

<P><STRONG><a name="[2c]"></a>inhibitTimer</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, co_queue.o(i.inhibitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inhibitTimer &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_queue.o(i.icoQueueHandler)
</UL>
<P><STRONG><a name="[f9]"></a>moveInhibitToTransmitList</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, co_queue.o(i.moveInhibitToTransmitList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = moveInhibitToTransmitList &rArr; codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToTransmitList
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inhibitTimer
</UL>

<P><STRONG><a name="[111]"></a>searchLastMessage</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, co_queue.o(i.searchLastMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchLastMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>

<P><STRONG><a name="[103]"></a>sdoCodeMultiplexer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_sdoserv.o(i.sdoCodeMultiplexer))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerAbort
</UL>

<P><STRONG><a name="[127]"></a>sdoServerReadIndCont</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, co_sdoserv.o(i.sdoServerReadIndCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sdoServerReadIndCont &rArr; icoOdGetObj &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadInit
</UL>

<P><STRONG><a name="[107]"></a>sdoServerReadInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, co_sdoserv.o(i.sdoServerReadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sdoServerReadInit &rArr; sdoServerReadIndCont &rArr; icoOdGetObj &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoDeCodeMultiplexer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckUserReadInd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerReadIndCont
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
</UL>

<P><STRONG><a name="[108]"></a>sdoServerReadSegment</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, co_sdoserv.o(i.sdoServerReadSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sdoServerReadSegment &rArr; icoOdGetObj &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
</UL>

<P><STRONG><a name="[129]"></a>sdoServerWriteIndCont</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, co_sdoserv.o(i.sdoServerWriteIndCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sdoServerWriteIndCont &rArr; icoEventObjectChanged &rArr; icoRecPdoObjChanged &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteSegment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteInit
</UL>

<P><STRONG><a name="[105]"></a>sdoServerWriteInit</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, co_sdoserv.o(i.sdoServerWriteInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sdoServerWriteInit &rArr; icoOdCheckObjLimits &rArr; checkObjValue_u8 &rArr; icoRecMapCheckObjLimitMapTable &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoDeCodeMultiplexer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckUserWriteInd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckUserCheckWriteInd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteIndCont
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObj
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdCheckObjLimits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAttribute
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
</UL>

<P><STRONG><a name="[106]"></a>sdoServerWriteSegment</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, co_sdoserv.o(i.sdoServerWriteSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sdoServerWriteSegment &rArr; sdoServerWriteIndCont &rArr; icoEventObjectChanged &rArr; icoRecPdoObjChanged &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckUserWriteInd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoServerWriteIndCont
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdPutObj
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerHandler
</UL>

<P><STRONG><a name="[100]"></a>searchSdoServerIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_sdoserv.o(i.searchSdoServerIndex))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoGetObjectAddr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckObjLimitNode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoCheckObjLimitCobId
</UL>

<P><STRONG><a name="[b1]"></a>addTimer</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, co_timer.o(i.addTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTimerCheck
</UL>

<P><STRONG><a name="[b4]"></a>codrvCanErrorHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, codrv_bxcan.o(i.codrvCanErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = codrvCanErrorHandler &rArr; codrvCanStartTransmission &rArr; codrvCanSetTxInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDriverHandler
</UL>

<P><STRONG><a name="[c0]"></a>codrvCanGetBtrSettings</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, codrv_bxcan.o(i.codrvCanGetBtrSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codrvCanGetBtrSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>

<P><STRONG><a name="[c2]"></a>codrvCanGetChan</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, codrv_bxcan.o(i.codrvCanGetChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codrvCanGetChan
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetFilter
</UL>

<P><STRONG><a name="[bc]"></a>codrvCanInitController</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, codrv_bxcan.o(i.codrvCanInitController))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = codrvCanInitController &rArr; codrvCanSetBitRate &rArr; codrvCanGetBtrSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInit
</UL>

<P><STRONG><a name="[c3]"></a>codrvCanSetIdFilter</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, codrv_bxcan.o(i.codrvCanSetIdFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = codrvCanSetIdFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetFilter
</UL>

<P><STRONG><a name="[c8]"></a>codrvCanTransmit</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, codrv_bxcan.o(i.codrvCanTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = codrvCanTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[cd]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cpu_stm32f0_keil.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
</UL>

<P><STRONG><a name="[36]"></a>canInd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.canInd))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[37]"></a>commInd</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, main.o(i.commInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = commInd &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[114]"></a>exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.exit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>hbState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.hbState))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[34]"></a>ledGreenInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ledGreenInd))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[35]"></a>ledRedInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ledRedInd))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2d]"></a>nmtInd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.nmtInd))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[32]"></a>pdoInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.pdoInd))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[33]"></a>pdoRecEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.pdoRecEvent))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[30]"></a>sdoServerCheckWriteInd</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, main.o(i.sdoServerCheckWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdoServerCheckWriteInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2f]"></a>sdoServerReadInd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.sdoServerReadInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdoServerReadInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[31]"></a>sdoServerWriteInd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.sdoServerWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdoServerWriteInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
